%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: tree.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: user
%%CreationDate: 2016/10/26, 15:37:43
%%BoundingBox: 0 0 567 567
%%HiResBoundingBox: 0 0 567 567
%%CropBox: 0 0 567 567
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1072 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2016-10-26T15:37:24+08:00"
   xmp:CreateDate="2016-10-26T15:37:24+08:00"
   xmp:MetadataDate="2016-10-26T15:37:24+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 10.0 for PowerPoint"
   xmpMM:DocumentID="uuid:9c2e1ceb-5111-417e-86c5-a5dcd9242cd4"
   xmpMM:InstanceID="uuid:4595c8fb-dda5-4cff-91d2-35e2a398efd5"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 10.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">幻灯片 1</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>user</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -567 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 567 li
567 567 li
567 0 li
cp
clp
56.693 190.383 mo
510.236 190.383 li
510.236 247.076 li
56.693 247.076 li
cp
false sop
.0636912 .698146 1 .00854505 cmyk
ef
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
56.693 190.383 mo
510.236 190.383 li
510.236 247.076 li
56.693 247.076 li
cp
@
311.811 445.501 mo
255.118 445.501 li
255.118 193.499 li
311.811 193.499 li
cp
ef
311.811 445.501 mo
255.118 445.501 li
255.118 193.499 li
311.811 193.499 li
cp
@
67.499 201.77 mo
103.499 201.77 li
103.499 237.77 li
67.499 237.77 li
cp
0 0 0 0 cmyk
ef
67.499 201.77 mo
103.499 201.77 li
103.499 237.77 li
67.499 237.77 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc13ba13000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79662698af9d0000a43000000c3e68656164e606fe47000010480000
0036686865610d8d122a0000108000000024686d7478cec5ef7f000010a4
00003c4a6c6f6361009512e000004cf000003c8c6d6178701c1103500000
897c000000206e616d6558727f330000899c000004f870726570c7f0742e
00008e940000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e10002ff4000acff00000009000000004d53202000200000
feff0600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
000000059eb8b0936aeb5f0f3cf50019080000000000bbeb7ccc00000000
c5229872fbdafd8d09ec07c5000100090002000100000000000100000600
fe0001c40aa0fbdafa8609ec000100000000000000000000000000000f03
040e0000000000000000000001cf000004d9001704d9001704d9001704d9
001704d9001704d9001704d9001704d9001704d9001704d9001704d90017
0634ffd30634ffd3047c008d043c004f043c004f043c004f043c004f043c
004f043c004f050b008d050b008d051d000f051d000f03e7008d03e7003f
03e7008d03e7003f03e7003c03e7004d03e7005503e7007503e7008d03e7
008d03ac008d0519004905190049051900490519004905190049050c008d
050c008d054300100222008d0222ff5a022200260222ff440222ff480222
ff4e0222ff5b0222ff80022200220222001e04c9008d02a6000302a6ffaf
0460008d0460008d0362008d036200720371008d0362008d03760015047e
008d06fe008d0545008d0545008d0545008d0545008d0545008d0521008d
056900500569005005690050056900500569005005690050056900500569
005005690050057200500572005006fe00500442008d0442008d057d0050
0481008d0481008d0481006a0481008d03c8003f03c8003f03c8001f03c8
002303c8003f03c8003f03f6000c03f6000c03f6000c03f6000c0539008c
0539008c0539008c0539008c0539008c0539008c0539008c0539008c0539
008c0539008c0539008c04bb00160740002b0740002b0740002b0740002b
0740002b04680021042800100428001004280010042800100428001003d3
003303d3003303d3001e03d300330447000a0447000a0447000a0447000a
0447000a0447000a0447000a0447000a0447000a0447000a0447000a058f
ffe2058fffe20438008603cb005a03cb005a03cb005a03cb005a03cb005a
03cb005a049100860491008104a6002604a60026038f0086038f0024038f
0086038f0020038f0020038f001d038f0030038f003f038f0086038f0086
03580086049c0058049c0058049c0058049c0058049c0058049c0086049c
008604c10034021000860210ff600210001f0210ff540210ff410210ff53
0210ff650210ff7b0210001802100016046f0086026900000269ffa10405
00860405008602fc008602fc0085030d008602fc0086030c002c04150086
0648008604c7008604c7008604c7008604c7008604c700860497008604da
005504da005504da005504da005504da005504da005504da005504da0055
04da005504e4005504e40055062e005503fd008603fd008604de00550425
0086042500860425005a04250086036f0043036f0043036f0001036f0006
036f0043036f0043037b001b037b0008037b001b037b001b04ac008404ac
008404ac008404ac008404ac008404ac008404ac008404ac008404ac0084
04ac008404ac00840435001b068a002b068a002b068a002b068a002b068a
002b0404002603cd000b03cd000b03cd000b03cd000b03cd000b038f003e
038f003e038f0016038f003e03f3004703f3004703f3004703f3004703f3
003703f3004703f3004703f3004703f3004703f3004703f3004706330047
06330047044b007e03590048035900480359003b03590048035900480359
0048077d004807080048060e0048060e0048044b004b04c6004b048d004b
044b004c0407004a0407004a0407004a0407004a0407004a0407004a0407
004a0407004a0407004a0407004a0288001906c200190909001904ce0019
06c2001909090019046f0019046f0019046f0019046f0019048100190481
00190481001904810019046f0019046f001906b6001906b6001906b60019
06b6001906c8001906c8001906c8001906c8001906b6001906b60019046f
0019046f001906b60019064d001908950019046f0019046f001904ea0019
046f001906b60019051600190516001905450019075e001903cb001b03cb
001b03cb001b03cb001b03cb001b044b004b044b004b044b004b044b004b
044b004b044b007e044bff9f0461fff901f7006b01f7ff7801f7001a01f7
ff6301f7ff3701f7ff7601f7ff6d01f7ff7301f7000801f7007e0403006b
043a006e020bffdb020bffdb020bff6d03d7007e03d7007e03d7007e01f7
007e01f700320273007e01f7003f021c00140361007e0682007e044b007e
044b007e044b007e044b0063044b007e04faff96044b007e044d0048044d
0048044d0048044d0048044d0048044d0048044d0048044d0048044d0048
045a0048045a004806be0048044b007e044b007e044b004b02d8007e02d8
007e02d8fff202d8005703310049033100490331ffff0331000003310049
0331004905d4004905d400490470007f0211007e02c6001702e8001702c6
001702d6001b0510001704af001704af001704af001704af001704af0017
04af001704af001704af001704af001704af001705400017078a00170728
001707280017072800170728001707280017072800170728001707280017
0728001707280017044b0079044b0079044b0079044b0079044b005e044b
0079044b0079044b0079044b0079044b0079044b007903c9001605f60023
05f6002305f6002305f6002305f6002303ad002003ca001603ca001603ca
001603ca001603ca0016032e0045032e0045032e0003032e004503540066
037b005503a5005002bf003602f5005a0244003802f5003a02c7003a01d0
001c029c001802fb005a017a004f0184ffd902c0005a0176005a046c005a
02f9005a02f5003902f5005a02f5003a0200005a023a003c01fa001c02fb
005a02a50019041b002002a9002002a60017023a00340267000002840000
02a000000000fcfe0000fce3026800000284000002a000000000fcfe0000
fce20336000003690000039b00000000fc980000fc640336000003690000
039b00000000fc960000fc6501fc0000038e000003920000039600000000
fc6b0000fc6803510000030f0000036d0000038800000000fc890000fc6d
031f000003470000036e00000000fca10000fc7a03140000031c00000324
00000000fca80000fc9f029f000002a3000002a800000000fce20000fcde
02cf000002c2000002b5000003e3000004150000044500000000fc400000
fc0f01e2000001f7000001e2000001e200000000fd430000fd43026d0066
0000fd60028600660000fd5502020067022c000004d9001704d9ff72047c
008d0347008d049f002b03e7008d03e7fe9d03d30033050c008d050cfe7a
056900500222008d0222fe930222ff4f0460008d04c0001a06fe008d0545
008d03f0004d056900500569ff0f050c008d0442008d03c2004a03f6000c
042800100428fe4d04280010066900000468002106760077057200490572
fef30447000a0447000a0438008603120086040e0021038f0086038f0086
038f003e049c0086049c008604f6005502100086021000100210ff520405
0086041e00110648008604c700860393005704da005504da0055049c0086
03fd0086037a004e037b001b03cd000b03cd000b03cd000b05bb00000404
002605d8006e04e1005504e1005504ba004c04ba004c045d007e04520052
03bd000c0443000003a9004703a9004702ea0040045a007e045a007e045c
0050048f0004024a0079024a0000024aff7d024aff1d03d7007e03e40000
0482007e03c500160315003e031e0044044d0048044d004804a20020043e
0064045b0046034100490324000204630074046300740463007304630028
0598004205980044039b000905e7007605be004f05be004f028900000000
fd0403f400000000fc360224007d0224007d0224007d0235003602100054
0210005404d900170472008e047c008d0375008d0375008d0379008d0562
000a03e7008d03e7003f03e7004c06a9003a03db003e0537008d0537008d
0537008d0222008d0222ff4e02a600030481008d0481008d0508000a072a
000a06fe008d050c008d072c008d0569005005690050050a008d0442008d
043c004f03c8003f03f6000c046100080461000804e5001605ca00000468
00210543008d0507008d048e004d072d008d076a008d051d000c0663008d
046d008d044f0048044f004f074f008d049800400516000c050f000c051a
00000447000a041c0088043800860321008603210086033a008604b6000b
038f0086038f0024038f001e05d800310396004a04b0008604b0008604b0
0086021000860210ff5302690000040c0086040c00860461000306480086
049c008604da005504d700550497008603fd008603cb005a036f0043037b
001b03d6001703d60017045a001a054300000404002604ba008604900086
04320051066f008606960086049c001805d700860419008603e6005d03ee
0055068800860432004a048a001d0490001d0481000006430003066c0086
03f30047044200000443000003f5007e02d6007e02d6007e02f0007e01f7
ff6d04a80019044b004b0407004a0407004a0407004a05e50030036a003a
0474007e047400700474007e01f7006b01f7ff76020bffdb03f5007e03f5
007e043500140636001205b5004c045d007e065a007e044d004804490048
0446007e044b0079044b007e0359004803310049031e00090682007e03ca
001603ca001603f900160567004203ad0020047f007e044c007e03e80030
061b007e0650007e0477000905b2007e03f5007e037f003f0380004a0606
007e03fc002b046dfff90461fff90441001103a2000003a2000003a20000
0000fc950000fc95029b00e6029b009b029b009b03b5007303b5005303b5
0053040a0058026900cf02690091035e006d035500450210001702350036
023500a00223007d05b1007c0210006b021000170210006b02100017037b
0064037b001b037b0064037b001b02100017037b001b02c1005802c100a9
02c1005802c100a9044f0059044f0097044f0059044f009703700002033f
002003cd017003fc01870370001c033f003d0273003b0273003b03fcfff5
03fcfff5073e0083073e0083073e0083073e008303fcfff903fc00940224
007d0224007d027e006b027e00610299009d0299005702c0003602c00069
0259006d025900630277009202770065027e006b027e00610299009d0299
005702c0003602c0006903fc008603fc006003fc006103fc005604c80052
045d005703fc001e03fc003901de00790382007905a30000057600000841
000007300000074400000730000006ad009e06ad009e040e006905c30032
05d9004f02bd000003fc002104b6003c040e002003fc0049040e00520458
004c03fc00a903fc0044040e004c03fc0063044d0015040e001d03df002d
039f005503f8004f039f0054039f000506350039085e008d03fc001c073f
00860437001a04a8004e02de001903f2004f03f000430460001e03e9004f
0442006603be002f0440004d04420047040e0039040e0094040e0058040e
0055040e001a040e0060040e0054040e0051040e003d040e004204740058
02ad001c03a000510385004d03d30024038a005f03ce0058035f002503d4
003a03dc0046039f0037039f0079039f0050039f0053039f002d039f0062
039f0045039f0047039f0038039f003804a8004e02de001903f2004f03f0
00430444001e03e9004f0442006603be002f0440004d04420047040e0039
040e0094040e0058040e0055040e0024040e0060040e0054040e0051040e
003d040e0042032f003d0205001d02b4003e02b0003802ed002302b20043
02e4004b029d002e02ed003c02e4003602d7003b02d0003a02c7004b01c7
004d01c70047032f003d0205001d02b4003e02b0003802ed002302b20043
02e4004b029d002e02ed003c02e4003602d7003b02d0003a02c7004b01c7
004d01c7004702b5002f02050025027000300274002302750010026a0031
027a002a0261001d028b001e026e001b02b5002f02050025027000300274
002302750010026a0031027a002a0261001d028b001e026e001b02d8ff2e
032c003805870038059400380543003805940038055a00380592003805fa
004205fa0042059d003b05eb003b05e8003b0607002305b1004405e80044
0570002c05d50039087e0039057c004607ed004603fc003403fc003703fc
005403fc002203fc005303fc005403fc005103fc004403fc006603fc0045
03fc005503fc005603fc002f05e9002c0439002206b40059044c004c0301
000e03fcfffe049f002b057200490482007e064200530467005304450036
073e0092073e0087073e00b6073e00b606b7007606b7010806b7007606b7
01080a7b00920626007d0466002801da000001da00000466000004660000
0466ffdb0466ffde04660000046600000466000004660000046600000466
0000046600000466000004660000046600000466000004660000046601a8
04d9001704d9001704d9001704d9000504d9001704d9001704d9001704d9
001704d9001704d9001704d9001704d9001703e7008d03e7008d03e70047
03e7ffe803e7ffbd03e7ffdd03e7ffdd03e700460222002c022200880569
0050056900500569005005690050056900500569005005690050061e0050
05940050059400500594005005940050059400500539008c0539008c0617
008c0617008c0617008c0617008c0617008c0617008c0428001004280010
0428001003f3004703f3004703f3ffca03f3ff9a03f3ffca03f3ffc503f3
004703f3ffc503f3ffc903f3ffc803f3ffc503f300470407004a0407004a
040700300407ffdb0407ffb60407ffd90407ffd90407004a01f7001c01f7
006b044d0048044d0048044dfff2044dffd2044dffef044dfff2044d0048
051000480510004805100048051000480510004805100048044b0079044b
0079052e0079052e0079052e0079052e0079052e005e052e007903ca0016
03ca001603ca0016048d004b046600380447000a0447000a0447ffe80447
ffc30447ffe80447ffe80447000a0447fff10447fff20447fff20447ffef
0447000a038f0086038f0086038f0000038fffa8038fff83038fffa8038f
ffa8038f00410210001c0210007f04da005504da005504da003e04da0019
04da003e04da003804da0055058b0055058b0055058b0055058b0055058b
0055058b005504ac008404ac0084058a0084058a0084058a0084058a0084
058a0084058a008403cd000b03cd000b03cd000b01da0000046600000466
ffdb04660000046600000466000004660000046600000466000004c10066
0540008d0545008d0536008d04b5008604c3008604b5008603f6000c02c6
0017037b001b01f70008046f0019046f0019046f001906b6001906b60019
06b6001903130018030a007803160054036b007802b7007802920078037c
00550367007801b000780205002802f4007802670078049a007803920078
03a1005502f4007803a10055030d00780288003a02b0001e0378006e0313
001804a1002802c9001802ac0011025d001b0000fdfc0000fdfc0466010c
0466010c0466007e0466007e03c1000003c10000030c0000030c0000030c
0000030c0000022c0000022c000001ff000001ff000001ff000001ff0000
0000fcff0000fcff02aa006902aa006902aa009802aa009801ce000002aa
008202aa008202aa008202aa0082027f0050027f006a0324ffeb02910084
0466010c02aa001402aa0013033600000336000003140000030c0000038e
0000031f000003fcfff903fcfff9038e0000038e00000000fedd0000fe4a
0000fdfa0000fdfa0000fe290000fe290000fdae0000fdae01ce000002aa
00140291008302aa001502aa000002aa0000039a0000039a00000000fdfd
0000fdfd0000fd090000fd090000fd090000fd0902aa000002aa000003fc
fff90466007e02aa0098038e0000038e0000038e0000038e0000038e0000
038e000004010014040101470000000002aa000002aa000001ce000001ce
0000030c0000030c000002aa000002aa00c802aa00c803f100c801ce0000
01ce000001e2000001e2000002aa00a003b1008402aa000002aa0000075c
003c075c0000075c0000075c0000075c0000075c003f06d2000006d20000
075c0000075c0000075c004001df002001df002001e7002401e7002400f8
002f00f8002f02070022020700220209003702090037019d0028019d0028
020700230207002302090039020900390309003803090038015f003d015f
003d015200100152001001c3000601c3000601bf000801bf000803270025
0327002503270025032700250000ff9203bd0000041a0000041a00000416
ffe40416ffe4041a000b041a000b041a000b041a000b0401ffff0401ffff
0401ffff0401ffff015f003d02aa000001ce000003f100c8055800190472
008e049300140433003104db004f051d000f05e700190472003b03e7005b
0543005003f1005503acffd60573004904ba00110266008d026800110464
008d071c008c0545ffd605690050066a004f051e00190481008d03cf003f
03c2004a045c001903f6000c057200490539008c0465001003d3003303eb
003e03f10046040e004e08de008d0839008d0629008d056d008d07eb008d
0750008d04d900170222ff43056900500539008c0539008c0539008c0539
008c0539008c04d9001704d900170634ffd3052900490519004904600073
056900500569005003eb000008c5008d0839008d051900490714008d04e6
008d0545008d04d9ffed04d9001703e7ffcd03e700550222feac0222ff5c
0569003b056900500481ffbf04810078053900390539008c03eb003e050c
008d0523008d0439004603ec003304d9001703e7008d0569005005690050
05690050056900500428001004d9ffde0446ffda03850011040affab0382
003b0496000b055e000f04c0001a03e8ff9102c30003050f004f049d000f
04b4000704d90017047c008d047c008d047c008d043c004f050b008d050b
008d050b008d050b008d050b008d03e7007a03e7007a03e7008203e7003e
03e7008003ac008d05190049050c008d050c008d050c008d050c0015050c
008d0222ff460222ff7e0460008d0460008d0460008d0362008d03620035
036200600362006606fe008d06fe008d06fe008d0545008d0545008d0545
008d0545008d056900500569005005690050056900500442008d0442008d
0481008d0481008d0481008d0481008d03c8003f03c8003f03c8003f03c8
003f03c8003f03f6000c03f6000c03f6000c03f6000c0539008c0539008c
0539008c0539008c0539008c04bb001604bb00160740002b0740002b0468
0021046800210428001003d3003303d3003303d300330390002403e40012
046300110481008d0562008d04cc008d03f50033043c003003ac004903e9
008d04920029044b007e045ffffb03b60048044b004b0443004a0288fff8
066e007e044b007e03d7007e0281001b03e40005044b007e05870048044b
007e033a004602ed001702c60017041c0014032e004503d5003e03740026
0362003d0779004b0402007e0656007e03f3004701f7ff61044d0048044b
0079044b0079044b0079044b0079044b00790407005103f3004703f30047
063300470474ffde03cb001b03d70042044d0048044d004803a9001c020b
ff6b0779004b03cb001b044b007e03f3ffc003f300470407ffe30407004a
01f7fecf01f7ff73044dffee044d004802d8ff7402d80011044b0000044b
007903a9002a044b005104db004b041f0048033a004503f300470407004a
044d0048044d0048044d0048044d004803ca001602a4007804fc007e02cf
0017069d004b069f004b0362ffe103310049032e0045037a003b03fb0030
0260000502600005044b004b0308001003f2000c03910035040e00580325
003c021d009903d9009904b30098029b00e603f30047044b007e044b007e
044b007e03590048044b004b044b004b044b004b044b004b044b004b0407
004a0407004a0407004a040700480407004a0288001903cb001b044b007e
044b007e044b0067044bffff044b007e01f7ff3501f7ff3501f7ff6903d7
007e03d7007e03d7006b01f7007201f7ff6d01f7ff6d01f7ff620682007e
0682007e0682007e044b007e044b007e044b007e044b007e044d0048044d
0048044d0048044d0048044b007e044b007e02d8007e02d8007302d8000d
02d8fffa033100490331004903310049033100030331004902c6001702c6
001702c6ffde02c6ffde044b0079044b004d044b0079044b005a044b0079
03c9001603c9001605f6002305f6002303ad002003ad002003ca0016032e
0001032e0045032e0008044b007e02c6ffa805f6002303ca001603f30047
021100490290002403f3001a02f9ff970488007e042d007e033d004503f4
00170363003802ee0027034e007e0599004204f60005041c0088042b000a
03cb00400429005a049f0019054f0005041c0041038f006204d200550396
00540358ffd304bb0058042b00140278008602fcffed0405008606900082
04c7ffd304da00550622005504bb000504250086036f0045037a004e03d9
0005037b001b04e1005504ac008403f9000b038f003e038a004b038a0055
0385004108030086088f008d05b300860617008d06cf00860768008d0447
000a0210ff4704aa005504ac008404ac008404ac008404ac008404ac0084
0447000a0447000a055cffe2049c0058049c00580405004804da005504da
0055038a000008030086088f008d049c005806b3008604a0008604c70086
0447ffc50447000a038fff9d038f004d0210feb20210ff7004da000904da
00550425ff9a0425006904acfff704ac0084038a004b049c008604c30086
04060056038f003e0447000a038f008604da005504da005504da005504da
005503cd000b0447000a03cb005402fc0000037b001b033300320438001e
04ac00000435001b038f00180269000004ad00550425000003cdfff3039f
00500333001e023000a0040600a004a90064026900cf0447000a04380086
043800860438007803cb005a049100860491008604910086049100860491
0086038f0029038f002e038f0050038f001e038f004603580086049c0058
049c0086049c0086049c0086049c0009049c00860210ff3e0210ff550405
0086040500860405008602fc008602fc000002fc002802fc001e06480086
064800860648008604c7008604c7008604c7008604c7008604da005504da
005504da005504da005503fd008603fd008604250086042500860425005c
04250086036f0043036f0043036f002c036ffff7036f0043037b001b037b
001b037b001b037b001b04ac008404ac008404ac008404ac008404ac0084
0435001b0435001b068a002b068a002b040400260404002603cd000b038f
000f038f003e038f0038049c0086037b000a068a002b03cd000b0447000a
02fc00000355ff9c03fd000004250086052f0086044700860390003e03cb
00400358004e040a0086047f0019047f001904c40019047f0019046f0019
046f0019047f0019049600190496001906b5001906b5001906d6001906b5
001906b6001906b6001906b5001906d2001904ce001904ad001704af0017
04af001704af001704af001704af001704af001704af001704af00170727
001707280017072800170728001707280017072800170728001707280017
0728001703f3007d044b004b044c007f044b007e0363003803880048044b
004b0461004b040700510407005105240054036a0042036a003a044f003a
043700480255000c045e004b044a004b044a004803d4001203e0000c044b
0079044b007d044b007e026b0010026b0010024a007901f7007e03270013
033800130204007904ab007e06820079068200790682007e044bffc7044b
007e0468007e0449004805c1004805a700440598004202d8001d02d8001d
02d9001d02d8007e02d8007e02a0007902a0001603ea007e03ea007e0331
004901eeffc20246ffee01eeffc2029fffae02c6003802c6002604b10010
04ad00520441007403c9001605f6002303ca001603b4000e0338004503d5
004503a9002a03ae002a0382003b038200480382003b03590048052d0050
03f5007e0437004204540048045d007e02a4ffaf03d7001c033c007e0460
004b0382003b0382004806b4004b06fd004b075b004b0522001704060017
059f00170662001904f4007a04be007e0433002c03ef0057045dffd3045e
ffd30427000a0577ffda063300510425000a03bb005a0462008604620012
03600086036a003a01f7006a026d001c03e2008602fa002005b5004c0474
007e04a8005703bb0044048a004e0489004e0528000806be005203b90044
044d0048044d004803db008603f6003403f600860355001b04860082046f
004e05e300440497006204090019063b0026036e003e035c003a03310041
03f40012030c008603eb000a0475008603db008605a40072044a00180313
00180417000a030a00780327001e036b007802b7007802b70046037c0055
0367007801b000780205002802f4007802670078049a007803920078038d
007803a1005502f9004c02f40078030d007802b0001e0378006e04a10028
02bf003602ac004702f5003a042c003602f5005a02f5003a02c7003a02b8
002e027b003802770038029c0018017a004f02c0005a046c005a02f9005a
02f500390244002a02e6003902e6003902f5005a01fa001c02fb005a02db
0044046c005a02a5001902a7001c02f2005a027e001002dc003703d1004d
02c2002f017a004f0200005a02fb005a02a5001902f2005a027e001002ed
005203d1004d02c2002f069b007904df000e04da004b032d000e07730014
0552001404bc000703660014033d001403ec0014032d00140370001403cb
001b032d006403e2003606af0017026c0013029d00130474000104e20012
04d40012044b007e04ae004b02a8001905b5004b046b007e0247007306d7
007e04a0007e044b007e02d8007303ad0049036cffc203d30016042e0020
0352004504b8004704d2004b046a004b0411004a03880042036a003a0411
00510276006b0363003801eeffc204c80079038b004002e5004e02440038
026e003802e000390277003401d0001c01c1fffb029c001802fb005a01f7
001401b20052017a005c01f80014022d000001bc005c01b3005c0248005c
046c005a046c005a032c0000032c005a0322006402f5003903b70039023a
003c020a000c0213001c035700160330004102eb005202e4005202c10017
023a0034029e003402ca003402a200300316004002fb005a02fb005a0184
ffd90200005a01f60022020c002202b4005a041b002002a6001701c40035
034300280210006b021000170210006a01ce000001ce00000299004b0299
005e03fc004403fc0066044b0032044b0032025100000268000002670000
02510000032700000267000002680000023900980239009801ce000001ce
000002aa008202aa008202aa008202aa008202aa001e02aa009302aa0016
0176005a023a003c02a900200299005e0310009603100096031000960310
009603100096045700960457009604570096045700960310004304570043
04570043045700430457004304570043045700430457002f0457002f0457
002f0457002f0457002f0310002f04570025045700250457002504570025
045700250310001a0457001a0457001a0457001a0457001a0457001a0310
004204570042045700420457004204570042045700420457009604570096
045700960457009603100042045700420457004204570042045700420457
0042045700420457002f0457002f0457002f0457002f0457002f0310002f
0457002f0457002f0457002f0457002f0457002f03100026045700260457
002604570026045700260457002603100042045700420457004204570042
045700420457004204570096045700960457009604570096031000420457
004204570042045700420457004204570042031000260457002604570026
045700260457002604570026031000230457002304570023045700230457
0023045700230310002f0457002f0457002f0457002f0457002f0457002f
0310004b0457004b0457004b0457004b0457004b0457004b045700960457
009604570096045700960310004204570042045700420457004204570042
045700420310001a0457001a0457001a0457001a0457001a0457001a0310
002404570024045700240457002404570024045700240310002f0457002f
0457002f0457002f0457002f0457002f0310004e0457004e0457004e0457
004e0457004e0457004e0457009604570096045700960457009602aa0062
02aa006203360000049a0084037b001b02aa008502aa008502aa00c802aa
00c8029f00660267000003c1004703e30000038e0000023500a002aa0000
02aa000002aa009802aa00980440fff60440fff603020098032700000327
00000324000002aa0000071200d4071200d402bf003602b8003a02f50039
02a9002002c7003d01d9000001d9000001d9000001d90000028900000289
00000289000002890000038e0000038e0000032900000329000003290000
032900000324000003240000032900000329000003290000032900000324
ffff0324ffff03f4000003f4000003f4000003f400000324000003240000
031f00000314000001ff000001d90000031f0000031f0000031f0000031f
00000314000003140000031400000314000003f4000003f4000003f40000
03f40000027f006a027f006a05690050043c004f0456003a043c004f0456
003a042f0008042ffe46042f000803ac008d05690050046b000c05be008d
04cc000c0433004f0442008d044a0054039400480394003c04b8001204d7
002606c50019043a0060043efff00359004803630038035900480363002e
05a1004603920079044d004803c7000c04ee007e04d0000e03470049020b
ffdb045fffab04e4002604d7005503cb005a03cb004003cb005a03cb003d
040a001e040afe33040a001e0358008604c4005004540032055400860474
00370407005503fd008604d9ff9404d9fe4e04d9fe2604d9feed04d9ff9e
04d9fe5904d9fe3004d9feec04d9ff5004d9ff2604d9001704d9001704d9
001704d9ff9404d9fe5804d9fe3004d9feed04d9ff9404d9fe5904d9fe30
04d9feec06a4001706a4ff9406a4fe5806a4fe3006a4feed06a4ff9406a4
fe5906a4fe3006a4feec03e7feba04eafe7404eafe6c03e7feba04eafe74
04eafe6b03e7fe6703e7fe5d050cfeba060ffe74060ffe6d05c7fece050c
feba060ffe74060ffe6d05c7fecc050cfe68050cfe5c050c008d050cfeba
060ffe74060ffe6c05c7fecd050cfeba060ffe74060ffe6c05c7fecc06c2
008d06c2feba07c5fe7407c5fe6c077dfecd06c2feba07c5fe7407c5fe6c
077dfecc0222feba0325fe740325fe6d02ddfecd0222feba0325fe740325
fe6d0222fecc0222fe670222fe5d0222ff5b0222ff800569fede0636fe74
0636fe420569fede0636fe730636fe440569fe9b0569fe5e0442feba0428
fe620591fe740591fe9c0591ff230428fe000428fe1c0428001004280010
0572ff05063efe91063efe5a05f3fed50572fefc063efe91063efe5b05fa
fed40572feb10572fe7a057200490572ff05063efe7c063efe5005fafecf
0572fef1063efe7f063efe5005fafece074400490744ff050810fe7c0810
fe5007ccfecf0744fef10810fe7f0810fe5007ccfece04ba004c04ba004c
04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba
004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c
04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba
004c03a9004703a9004703a9004503a9004703a9004703a9004703a90047
03a90047045a007e045a007e045a007e045a007e045a007e045a007e045a
007e045a007e045a007e045a007e045a005d045a007e045a007e045a007e
045a007e045a007e045a007e045a007e045a007e045a007e045a007e045a
007e045a005d024a000b024aff86024aff83024aff6c024a000a024aff86
024aff86024aff69024aff14024aff14024aff60024affef024aff7b024a
ff32024aff69024aff68044d0048044d0048044d0048044d0048044d0048
044d0048044d0048044d0048043e0064043e006404630074046300740463
007404630074046300740463007404630074046300740463000804630009
04630074046300740463007404630053046300710463007405be004f05be
004f05be004f05be004f05be004f05be004f05be004f05be004f05be004f
05be004f05be004f05be004f05be004f05be004f05be004f05be004f05be
004f05be004f05be004f05be004f05be004f05be004f05be004f0447000a
0447000a0447000a0447000a0447000a0447000a0447000a0447000a0447
000a0447000a0447000a0447000a0447000a0447000a0447000a0447000a
0447000a0447000a0447000a0447000a0447000a0447000a060c000a0616
000a0616000a0616000a0616000a0616000a0616000a0616000a0616000a
038f0086038f0059038f0041038f0086038f0059038f0041038f0086038f
006f049c0086049c0086049c0086049c0086049c0086049c0086049c0086
049c0086049c0086049c0086049c0086049c0086049c0086049c0086049c
0086049c0086049c0086049c0086049c0086049c0086064a008606590086
065900860659008606590086065900860659008606590086065900860210
00250210ff8b0210ff720210ff7b0210001a0210ff8b0210ff720210ff70
0210ff0e0210ff0f0210ff77021000090210ffa00210ff420210ff660210
ff7b04da005504da005504da005504da005504da005504da005504da0055
04da005503fd008603fd008603cd000b040a001e03cd000b040a001e03cd
000b040a001e03cd000b040a001e03cd000b040a001e03cd000b040a001e
03cd000b040a001e03cd000b040a001e03cd000b040a001e03cd000b040a
001e03cd000b040a001e03cd000b040a001e03cd000b040a001e04e10055
04e1005504e1005504e1005504e1005504e1005504e1005504e1005504e1
005504e1005504e1005504e1005504e1005504e1005504e1005504e10055
04e1005504e1005504e1005504e100550696005506a0005506a0005506a0
005506a0005506a0005506a0005506a0005506a0005504d9001704d9ff94
04d9fe5804d9fe3004d9feed04d9ff9404d9fe5904d9fe3004d9feec050c
008d050cfeba060ffe74060ffe6c05c7fecd050cfeba060ffe74060ffe6c
05c7fecc057200490572ff05063efe7c063efe500572fe470572fef1063e
fe7f063efe500572fe4606a4001706a4ff9406a4fe5806a4fe3006a4feed
06a4ff9406a4fe5906a4fe3006a4feec06c2008d06c2feba07c5fe7407c5
fe6c077dfecd06c2feba07c5fe7407c5fe6c077dfecc074400490744ff05
0810fe7c0810fe5007ccfecf0744fef10810fe7f0810fe5007ccfece01d9
000001d900000289000002890000039a0000032900000329000003240000
03290000032900000324ffff03f4000003f400000324000001d90000031f
0000031400000232009d01ef009d01ef009d01ef009d0588008d048b000f
0442008d03870010046f008d071a003a03db003e04f4008d04b3008d049c
0010052b000c0562008d05d2008d0758008d05470050043c004f03f6000c
042800100428001004d700210605000c04cb004d048e004d048e008d063d
001e063d001e0222008d06a9003a04ac008d0558000a050c008d055d008d
048e004d074f008d04d9001704d900170634ffd303e70045054300500543
005006a9003a03db000b03eb003e0537008d0537008d0569005005690050
05690050044f0026046100080461000804610008048e004d036a008d0663
008d0387001004c7002004680021046d00280689003c0600002904360029
0710000a0714008d052600490513000c03f100550544000a04b6007e0407
000c044b007e0306001003a7007e063e0030036a003a044b007e043b007e
04170010048d000c0494007e04f5007e05f4007e0483004803590048031d
000903cf001003cf00100402002004e60009043e004e0406004e0406007e
050500160505001605e500300410007e04770014045c007e049e007e0406
004e05e1000f0222008d03f3000d03f30047063300470407003504070051
0407005105e50030036afffd03a9002a0474007e0474007e044d0048044d
0048044d0048037ffffb03ca001603ca001603ca001603e8002602d6007e
05b2007e0306001003fe002003ad0020044b004b063b004b0573002a03ca
002a063000140657007e045d004804850009036a0042046e001404f90086
0419000003fd00860321ffff04420086062200310396004a04380086043e
0086040c000004a9001b04d0008605390086068e008604d1005503cb005a
037b001b03cd000b03cd000b045a0026054f00190465005104320051045c
008605e1002005e100200210008605d800310440008604aa0003049c0086
04e6008604320051069300860447000a0447000a058fffe2038f004e04c7
005004c7005005d8003103960003038a004b04b0008604b0008604da0055
04d7005504d7005503e6001e03d6001703d6001703d600170432004e0321
008605d7008603210000045b0026040400260419003805fc00380580004a
0417004a063400030670008604c400580486001b03960053049200030400
000008000000040000000800000002af00000200000001550000040e0000
01bc00000199000001000000000000000000ffdc0000ff25040e0024040e
002403d9009903fefff90210006a037b006401b700280343002804c50028
04b200e603fcfffa0290003a052b0050045a004f043c004f03b60010040e
00600682007e05830020075c008d061b008d0799002c061d0098047c0012
03f6000c08ee001e047dfffb04bb002004e1004904fa002804270024043c
004f0635003906210034057800e6059d00e603fc0053070100bc03fc0056
045201d7045200be0400fff6040001bd040001bd0400fff6040001bd0400
fff60711008a045d003f047c008d040e003f04a60016055800560407000e
0682007904390048042bfffc035c003503ce000604510059033a00100327
000003270000032700000254000002540000025400000254000002aaff65
02aaff6504e0004607f4000a07e2fff70798ffe307920056063f008d0535
000a0728002905d2002007a8008d03f2000a0676007704e5001608ca0050
05b9005007920056079200560424004f05c100230539007e0495000e064f
007e0502001c06ba007e0366000c05e7007603f9ffd307a8004804b00048
065c004b05c100230342004906c3005505f600860497000a066300860552
003107000086038c000a05d8006e0470001a087a00550527005506c30055
06c3005503cb005a03c7009602aa00cf040e005b0000ffdc0000fe5101cf
0000025900a501c70000017a004f030cff4b0aa000b404d5009202d50083
02d5008304d500b202d500700aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40000fc48000000000000fd17
0000000000000000039a0000039a0000032400000324000003240000039a
0000032400000324000002560000032900000329000003bd000002aaff65
055001c4027f006303240000039a0000025600000289001e000000d40000
00de0284001e032400000324000003240000032400000324000003240000
032400000324000003240000032400000000000000000000000000000000
0000039a0000039a0000036d00000000000004150000031c0000036d0000
036d00000392000003470000034700000392000003920000035400000369
0000000000840000003f0000fffa00000075000000750000007500000075
000000750594fe6e0594fe910594ff15042ffe04042ffe15042f0008042f
00080447000a0447000a0447000a060c000a060c000a060c000a049c0086
049c0086049c0086064a0086064a0086064a008603cdffec03cdffec03cd
000b04e1005504e1005504e1005506a0005506a0005506a000550000fd7a
0000fd4f0000fd5a0000fd5a0000fbfe0000fc010000fbdc0000fbda0000
fbfe0000fbfc0000fbfe0000fbfc0000fbff0000fbff0000fc000000fc00
0000fc000000fc000000fbfd0000fbfd0000fda80000fc2e0000fc2e0000
fd0a0000fd0a0000fc7d0000fc7e0000fbe30000fbe30000fcac0000fcac
0000fcaa0000fca90000fd4f0000fd4f0000fd340000fd340000fd330000
fd330000fd470000fd470000fd760000fd760000fd450000fd600000fd60
0000fd600000fd600000fd340000fd6d0000fc8a0000fd6e0000fd0a0000
fcf10000fcf10000fc970000fc990000fca90000fca90000fc700000fca3
0000fc2e0000fc2f0000fc6d0000fc6d0000fd530000fcf10000fd6d0000
fcf30000fcde0000fcde0000fc660000fc650000fcdd0000fcdd0000fc2e
0000fc7e0000fd760000fc700000fc700000fc6b0000fc6b0000fc700000
fc710000fc460000fd7a0000fced0000fce70000fd450000fd450000fca8
0000fca80000fcde0000fd9f0000fdaf0000fcfb0000fd530000fd530000
fd420000fd420000fd7e0000fcde0000fcde0000fcde0000fc8f0000fc53
0000fc530000fc530000fc530000fc920000fc980000fc980000fc530000
fc530000fcbf0000fd650000fd650000fd620000fd620000fde60000fde6
0000fd510000fd510000fd630000fd630000fd800000fd7f0000fd510000
fd510000fd6a0000fd6a0000fce90000fce90000fdc00000fdc00000fd8a
0000fd8a0000fd570000fd570000fd5b0000fd5b0000fcc30000fcc30000
fcc30000fcc30000fc720000fc3c0000fc3c0000fc010000fc010000fc4e
0000fc4e0000fc130000fc130000fc0e0000fc0e0000fc4a0000fc4a0000
fdb50000fcd10000fd9f0000fcf60000fd4c0000fd4c0000fd470000fd47
0000fd2f0000fd2f0000fccd0000fccd0000fc700000fc710000fcb20000
fcb20000fc960000fc970000fca50000fca50000fcb20000fcb20000fc96
0000fc950000fc9f0000fc9f0000fc380000fc380000fc380000fc380000
fc9f0000fc9f0000fca30000fca90000fd470000fd4c0000fca40000fca4
0000fca40000fca40000fca90000fca80000fcaa0000fcaa0000fc380000
fc380000fc380000fc380000fd6d0000fd6d0000fc9f0000fca40000fca4
0000fd050000fd050000fd0d0000fd0d0000fc430000fc43042ffe62040a
000a040a000a040a001e01f70072044b004b044b004b044b004b044b004b
046f001906b600190aa000b400b400b400b400b400b400b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b400b400b4
00b400b400b400b400b400b400b4000000>
<000000000000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c0000013c0000013c0000013c0000013c0000013c0000
013c0000013c0000013c0000013c0000013c0000013c0000013c0000013c
0000013c0000013c000002d4000002d4000002d4000002d4000002d40000
02d4000002d4000002d4000002d4000002d4000002d4000002d4000002d4
000002d4000002d4000002d4000002d4000002d4000002d4000002d40000
02d4000002d4000002d4000002d4000002d4000002d4000002d4000002d4
000002d4000002d4000002d4000002d4000002d4000002d4000002d40000
02d4000002d4000002d4000002d4000002d4000002d4000002d4000002d4
000002d4000002d4000002d4000002d4000002d4000002d4000002d40000
02d4000002d4000002d4000002d4000002d4000002d4000002d4000002d4
000002d4000002d4000002d4000002d4000002d4000002d4000002d40000
02d4000002d4000002d4000002d4000002d4000002d4000002d4000002d4
000002d4000002d4000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000003bc000003bc000003bc000003bc000003bc000003bc
000003bc000003bc000003bc000003bc000003bc000003bc000003bc0000
03bc000003bc000004140000041400000414000004140000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
0000045e0000045e0000045e0000045e0000045e0000045e0000045e0000
045e0000045e0000045e0000045e0000045e0000045e0000045e0000045e
000005a2000006de0000089a00000abe00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e0000
0c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e00000c3e
00000c3e00000c3e00000c3e00000c3e00000c3e000100000f2201200010
00bd000700020010002f006000000c630141000400010000000e00ae0000
00030000000000640000000000030000000700fa00640001000000000000
0032015e0001000000000003001301900001000000000004001301a30001
000000000006001301b60001000000000007007d01c90003000104090000
006402460003000104090001002602aa0003000104090002000e02d00003
000104090003002602de0003000104090004002603040003000104090006
0026032a000300010409000700fa035000a9002000320030003000380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690020006900730020006500690074006800650072
002000610020007200650067006900730074006500720065006400200074
0072006100640065006d00610072006b0020006f00720020006100200074
0072006100640065006d00610072006b0020006f00660020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e00200069006e002000740068006500200055006e00690074
00650064002000530074006100740065007300200061006e0064002f006f
00720020006f007400680065007200200063006f0075006e007400720069
00650073002ea92032303038204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e574f5749
49422b43616c696272692d426f6c64574f574949422b43616c696272692d
426f6c64574f574949422b43616c696272692d426f6c6443616c69627269
20697320656974686572206120726567697374657265642074726164656d
61726b206f7220612074726164656d61726b206f66204d6963726f736f66
7420436f72706f726174696f6e20696e2074686520556e69746564205374
6174657320616e642f6f72206f7468657220636f756e74726965732e00a9
002000320030003000380020004d006900630072006f0073006f00660074
00200043006f00720070006f0072006100740069006f006e002e00200041
006c006c0020005200690067006800740073002000520065007300650072
007600650064002e0057004f0057004900490042002b00430061006c0069
006200720069002d0042006f006c00640052006500670075006c00610072
0057004f0057004900490042002b00430061006c0069006200720069002d
0042006f006c00640057004f0057004900490042002b00430061006c0069
006200720069002d0042006f006c00640057004f0057004900490042002b
00430061006c0069006200720069002d0042006f006c006400430061006c
006900620072006900200069007300200065006900740068006500720020
006100200072006500670069007300740065007200650064002000740072
006100640065006d00610072006b0020006f007200200061002000740072
006100640065006d00610072006b0020006f00660020004d006900630072
006f0073006f0066007400200043006f00720070006f0072006100740069
006f006e00200069006e002000740068006500200055006e006900740065
0064002000530074006100740065007300200061006e0064002f006f0072
0020006f007400680065007200200063006f0075006e0074007200690065
0073002eb10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802
f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b2
1e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b
1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb8
02e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5
b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d
121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1f
b802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802
d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b2
1d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f
1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb8
02cbb21d121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7
b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d
2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121f
b802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802
bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b2
1d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f
1fb802b1b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb8
02adb21c331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9
b21c311fb802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c
321fb802a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331f
b802a0b21c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb802
9cb21c311fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b2
1c321fb80297b21c321fb80296b21c321fb80295b21c331fb80294b21c33
1fb80293b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8
028fb21c331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028b
b21c321fb8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c
331fb80286b21c331fb80285b21c331fb80284b21c331fb80283b21c331f
b80282b21b341fb80281b21b341fb80280b21b341fb8027fb21b341fb802
7eb21b341fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab2
1b341fb80279b21b341fb80278b21b341fb80277b21b341fb80276b21b34
1fb80275b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb8
0271b21b341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026d
b21a351fb8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a
351fb80268b21a351fb80267b21a351fb80266b21a351fb80265b21a351f
b80264b21a351fb80263b21a351fb80262b21a351fb80261b21a351fb802
60b21a351fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb2
1a351fb8025bb21a351fb8025ab21a351fb80259b219371fb80258b21937
1fb80257b219371fb80256b219371fb80255b219371fb80254b219371fb8
0253b219371fb80252b219371fb80251b219371fb80250b219371fb8024f
b219371fb8024eb219371fb8024db219371fb8024cb219371fb8024bb219
371fb8024ab219371fb80249b219371fb80248b219371fb80247b219371f
b80246b219371fb80245b219371fb80244b219371fb80243b219371fb802
42b219371fb80241b219371fb80240b219371fb8023fb219371fb8023eb2
19371fb8023db219371fb8023cb219371fb8023bb219371fb8023ab21937
1fb80239b218391fb80238b218391fb80237b218391fb80236b218391fb8
0235b218391fb80234b218391fb80233b218391fb80232b218391fb80231
b218391fb80230b218391fb80301b2182e1fb8022fb218391fb8022eb218
391fb8022db218391fb8022cb218391fb8022bb218391fb8022ab218391f
b80229b218391fb80228b218391fb80227b218391fb80226b218391fb802
25b2173b1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2
173b1fb80220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b
1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb8
0218b2173b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214
b2173a1fb80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b217
3b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1f
b8020bb2173b1fb8020ab2173b1fb80209b217321fb80208b217321fb802
07b2173b1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2
173b1fb80202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b
1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb8
01fab2173b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6
b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b217
3b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1f
b801edb2173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801
e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b2
16231fb801e4b216371fb801e3b216371fb801e2b216381fb801e1b21638
1fb801e0b216431fb801dfb216441fb801deb216441fb801ddb216441fb8
01dcb216451fb801dbb216461fb801dab216461fb801d9b216461fb801d8
b216231fb801d7b216231fb801d6b216381fb801d5b216431fb801d4b216
431fb801d3b216431fb801d2b216441fb801d1b216461fb801d0b216461f
b801cfb216461fb801ceb216461fb801cdb216461fb801ccb216461fb801
cbb216431fb801cab216231fb801c9b216231fb801c8b216371fb801c7b2
16371fb801c6b216381fb801c5b216421fb801c4b216431fb801c3b21644
1fb801c2b216451fb801c1b216461fb801c0b216461fb801bfb216461fb8
01beb216461fb801bdb216461fb801bcb216461fb801bbb216461fb801ba
b216371fb801b9b216381fb801b8b216421fb801b7b216431fb801b6b216
431fb801b5b216431fb801b4b216441fb801b3b216441fb801b2b216441f
b801b1b216451fb801b0b216451fb801afb216451fb801aeb216461fb801
adb216461fb801acb216461fb801abb216461fb801aab216461fb801a9b2
15341fb801a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e
1fb801a4b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb8
01a0b2154e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019c
b215401fb8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b215
4f1fb80197b2154f1fb80196b215501fb80195b215521fb80194b215521f
b80193b215521fb80192b215411fb80191b2154f1fb80190b215501fb801
8fb215501fb8018eb215511fb8018db215521fb8018cb215521fb8018bb2
15521fb8018ab214581fb80189b214591fb80188b2145c1fb80187b2145d
1fb80186b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb8
0182b2145d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1f
c10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b
561fad0b561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561f
a60b561fa50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b
561f9e0a681f9a0a681f990a681f980a681f970a681f960a681f950a681f
940a681f930a681f920a681f910a681f9009681f8f09681f8e09681f8d09
681f8c09681f410902fc02fa0056001f02fb02fa0068001f017fb213321f
b8017eb212371fb80174b212371fb80173b211421fb80172b211421fb801
71b211421fb80170b211421fb8016fb211421fb8016eb211421fb8016db2
11421fb8016cb211421fb8016bb211421fb8016ab211421fb8013cb21142
1fb8013bb210421fb8013ab210421fb80139b210421fb80138b210421fb8
0137b210421fb80136b210421fb80135b210421fb80134b210421fb80133
b210421fb80132b20f451fb80131b20f451fb80130b20f451fb80112b20f
451fb80111b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451f
b8010db20e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb801
09b20e481fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a
1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd
0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b56
1fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213
321fb8017ab211401fb80179b211421fb80178b211421fb80177b211421f
b80176b211421fb80175b211421fb80143b211421fb80142b210421fb801
41b210421fb80140b210421fb8013fb210421fb8013eb210421fb8013db2
0f451fb80115b20f451fb80114b20f451fb80113b20f451fb903030302b2
401fa4be030200b4030200c4030200030300b213321fb8017bb213321fb8
0153b212371fb80152b211401fb80151b211401fb80150b211401fb8014f
b211401fb8014eb211401fb8014db211401fb8014cb211401fb8014bb211
401fb8014ab211401fb80149b211401fb80148b211401fb80147b211401f
b80146b211401fb80145b211401fb80144b211401fb80122b211401fb801
21b210421fb80120b210421fb8011fb210421fb8011eb210421fb8011db2
10421fb8011cb210421fb8011bb210421fb8011ab210421fb80119b21042
1fb80118b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f45
1ffb0f451ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff4
0e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a
1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc9
0c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e
1fb70b561fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212
371fb8017db212371fb8017cb212371fb80169b2112e1fb80168b2112e1f
b80167b211401fb80166b211401fb80165b211401fb80164b211401fb801
63b211401fb80162b211401fb80161b211401fb80160b211401fb8015fb2
11401fb8015eb211401fb8015db211401fb8015cb211401fb8015bb21140
1fb8015ab211401fb80159b211401fb80158b211401fb80157b211401fb8
0156b211401fb80155b211401fb80154b211401fb8012fb211401fb8012e
b210421fb8012db210421fb8012cb210421fb8012bb210421fb8012ab210
421fb80129b210421fb80128b210421fb80127b210421fb80126b210421f
b80125b20f451fb80124b20f451fb80123b20f451fb80105b20f451fb801
04b20f451fb80103b20f451fb80102b20f451fb80101b20e481fb8010040
a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c
4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f
84032e1f83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d
030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948
775578ab77550b77010c764875555475e475f47503147554756475747594
75d475e47507a475b475c47503b8ffc0401275383b468075907502147574
75020075010fb8ffc04021750b0e467448725573ab725504723472023bf4
7201e07201023072015072607202b8ffc0b372242846b8ffc0403572161a
461072307240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f
6f02af6fbf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002
ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568
ab6755662e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a
555bab5a55592e58555703251f562e545555ab5455532e515552ab51554f
2e4e554e03251f4d2e4b554cab4b554a2e485549ab4855504801472e4655
4503361f001f01001e01001e701e801ef01e040b601d701d02701de01df0
1d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f
198f199f19af19050f198f199f19030c7012801202701180110230114011
d011e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01
af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f
0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f
0c5f0c039f0c01400c262946ef0aff0a02400a242746ef09ff0902ff0901
0003012001010001100120010308b8ffc0b301151f46b80100b316010501
b80190b154532b2b4bb807ff524bb008505bb00188b02553b00188b04051
5ab00688b000555a5b58b101018e59b101024354b0144b515a58b101018e
59858d8d00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358
b0001db1160042592b5e73757373742b732b73742b2b73745e732b5e7374
757374755e73747573015e7374737475757473745e737473002b2b732b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b73
74752b2b732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b
5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[3135 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1442 1005 <00010094000003b00517002e00b5b10102435558400d0929010928010827
0101120130b8ffc040090f024d403001030029b80292b31e180b11b8ffde
b50f024d111312b8017d40092352290f10010b0510b8012bb24006540018
3f1a4ded5f5e5d323ffdcd012f2bcdc433fdcd31305f5d2b005d015d5d5d
1b4018292801292901092901092801082701011201403001031312b8017d
40092352290f10010b0510b8012bb240065400183f1a4ded5f5e5d323ffd
cd3130015f5d005d015d5d5d5d5d5925140e022321222e0235343e023333
11070606262635343e0237253e0333321e02151133321e0203b0060b0e09
fd36080e0b06050b0e09f1d0171d110602080e0c0116050f18271f262f18
08d3090f0b05641c27170a0a17271c1d27180b034a730b05112a26181f16
0e08b40405030103070c09fbd30b1827>PBAAAA+Calibri-Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>PBAAAA+Calibri-Bold AddT42Char 
PBAAAA+Calibri-Bold /CharStrings get begin
/one 1005 def
end
PBAAAA+Calibri-Bold /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/LJJAOL+Calibri-Bold /PBAAAA+Calibri-Bold findfont ct_VMDictPut
/LJJAOL+Calibri-Bold*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
LJJAOL+Calibri-Bold nf
LJJAOL+Calibri-Bold*1 [29.04 0 0 -29.04 0 0 ]msf
78.1086 229.49 mo
(1)sh
463.501 201.77 mo
499.501 201.77 li
499.501 237.77 li
463.501 237.77 li
cp
0 0 0 0 cmyk
ef
463.501 201.77 mo
499.501 201.77 li
499.501 237.77 li
463.501 237.77 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri-Bold gcheck setglobal} if
2 1758 1006 <00010058000003bc0525003e0112b10102435558400e042c01042b01093a
010939010b40b8ffc0b60f024d00400116b802eeb633253325330039ba02
ee000bffea400a0f024d000b010f030b2ab80169b61138392020391bb8ff
e8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e531039180b0f
014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f1239
39ed012f5f5e5d2bedcd39392f2f10ed31305d2b005e5d5d015d5d1b4013
042c01042b01093a010939010b0040010f032ab80169b61138392020391b
b8ffe8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e53103918
0b0f014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f
123939ed3130015f5e5d005e5d5d015d5d5925140e022321222e0235343e
0237373e0335342e0223220e0223222e0235343e0633321e0215140e0207
0721321e0203bc050a100afd181620140906101914e043522e1115293e2a
3b5b452e0d090d080503060a194362764065976431184c8a729701fe0a11
0c066b1d291a0b08172c23212f252315f046735f5024213b2c191e251f0c
1c2f22171f171118252318335b7d483f7a8dab719b0c1929>PBAAAA+Calibri-Bold AddT42Char 
PBAAAA+Calibri-Bold /CharStrings get begin
/two 1006 def
end
PBAAAA+Calibri-Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LJJAOL+Calibri-Bold*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
LJJAOL+Calibri-Bold nf
LJJAOL+Calibri-Bold*1 [29.04 0 0 -29.04 0 0 ]msf
474.111 229.49 mo
(2)sh
265.5 400.501 mo
301.5 400.501 li
301.5 436.501 li
265.5 436.501 li
cp
0 0 0 0 cmyk
ef
265.5 400.501 mo
301.5 400.501 li
301.5 436.501 li
265.5 436.501 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri-Bold gcheck setglobal} if
2 2202 1007 <00010055ffe903b6052500580141b10102435558b70847010a46010b5ab8
ffc0b60f024d005a0131b802c9400d4e53264e40264e4e2640030e1bba02
e90000ffe8b40f024d000eb8ffe8400a0f024d000e010f030e45bb015600
3b0009015eb6113b113b111636b8ffe8b30b014d36b8ffe8b40b0f014c36
b80155b249532cb801044011202005495316180b014d16180b0f014c16b8
0156b240055600183f1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10
ed10ed012f5f5e5d2bd42bed1217392f2f2f11123910ed31305d2b005e5d
5d1b400d0847010a46010b005a010f0345bb0156003b0009015eb6113b11
3b111636b8ffe8b30b014d36b8ffe8b40b0f014c36b80155b249532cb801
044011202005495316180b014d16180b0f014c16b80156b240055600183f
1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10ed10ed3130015f5e5d
005e5d5d5901140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303b64a84b86d4274593a1209070310100a314c66
4137543b1d23456947700d120c05050b110c713a5a3d20162b442e345c49
330c080c0804020609143e5e7b485e9163331e3a5739446c4b28017b6196
6635131c1e10141b291d30251b1f1b1a2f43292d48331c0716271f1d2514
081b32472b213b2b191f25200714261e19211610132624192c53794c3b66
50380e0308355065>PBAAAA+Calibri-Bold AddT42Char 
PBAAAA+Calibri-Bold /CharStrings get begin
/three 1007 def
end
PBAAAA+Calibri-Bold /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LJJAOL+Calibri-Bold*1 
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
LJJAOL+Calibri-Bold nf
LJJAOL+Calibri-Bold*1 [29.04 0 0 -29.04 0 0 ]msf
276.11 428.221 mo
(3)sh
265.5 202.499 mo
301.5 202.499 li
301.5 238.499 li
265.5 238.499 li
cp
0 0 0 0 cmyk
ef
265.5 202.499 mo
301.5 202.499 li
301.5 238.499 li
265.5 238.499 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri-Bold gcheck setglobal} if
2 1118 1004 <00020039ffe903d605250013002b00c7b10102435558b9002dffc0b60f02
4d002d0114ba02950000ffd4400a0f024d0000010f030020bb0295000a00
1bffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d25
180b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b012fedd45f
5e5d2bed31305d2b1b4012002d01092001090a010214010200010f031bb8
ffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d2518
0b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b015f5e5d5d5d
5d31305d5901140e0223222e0235343e0233321e0205342e0423220e0215
141e0233323e0403d63271b58385ae66293371b58285af6628fef70a151f
2c38223b4d2d12162f4a34273c2d1e1307028c9bfab05e5babf79c9afbb0
5e5babf7a95c8d68482b123972aa718ab56b2b19324c647e>PBAAAA+Calibri-Bold AddT42Char 
PBAAAA+Calibri-Bold /CharStrings get begin
/zero 1004 def
end
PBAAAA+Calibri-Bold /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LJJAOL+Calibri-Bold*1 
[48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
LJJAOL+Calibri-Bold nf
LJJAOL+Calibri-Bold*1 [29.04 0 0 -29.04 0 0 ]msf
276.11 230.22 mo
(0)sh
3 lw
238.5 218.916 mo
124.469 218.819 li
@
1 lc
0 lj
133.465 224.076 mo
124.469 218.819 li
133.473 213.576 li
@
0 lc
1 lj
441.001 217.683 mo
326.97 217.586 li
@
1 lc
0 lj
335.966 222.843 mo
326.97 217.586 li
335.974 212.343 li
@
0 lc
1 lj
283.6 265.5 mo
283.503 379.531 li
@
1 lc
0 lj
288.76 370.535 mo
283.503 379.531 li
278.26 370.527 li
@
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri-Bold gcheck setglobal} if
2 1044 882 <0001003b018f0238025d000f0011b200070bb901210004002fed012fcd31
30011406232122263534363321321e0202381618fe601916161901a00c11
0c0501f73a2e2f39382e0a182800>PBAAAA+Calibri-Bold AddT42Char 
2 316 286 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>PBAAAA+Calibri-Bold AddT42Char 
2 724 361 <0002ffdbfe9301a0054e00240030005fb10102435558b9002502bfb22b0c
00b8025fb4191900322eb8017bb3281f4914b80144b240054f00183f1a4d
ed3fd6ed113333012fedc4d4ed31301bb31900322eb8017bb3281f4914b8
0144b240054f00183f1a4ded3fd6ed11333331305925140e0223222e0435
343e0233321633323e023511343e0233321e021513140623222635343633
3216018d24496e4a293a1a0a040203080a08051f121a26180c0c1c302525
301d0c133d55543c3e54553b046982592d0b0c12171d171c25160a051023
373c03930a0f0b06060b0f0a01304c3a38494c3b3900>PBAAAA+Calibri-Bold AddT42Char 
2 956 878 <00010170fe93025d05a600150012b90015022eb30b10054f003f2f012fed
313001140e0223222e023511343e0233321e0215025d0b1c2d23222d1c0b
0b1c2d22232d1c0bfebd0a100b05050b100a06be0a100b06060b100a>PBAAAA+Calibri-Bold AddT42Char 
PBAAAA+Calibri-Bold /CharStrings get begin
/hyphen 882 def
/e 286 def
/j 361 def
/bar 878 def
end
PBAAAA+Calibri-Bold /Encoding get
dup 45 /hyphen put
dup 101 /e put
dup 106 /j put
dup 124 /bar put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LJJAOL+Calibri-Bold*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three 49{/.notdef}rp 
/e 4{/.notdef}rp /j 17{/.notdef}rp /bar 131{/.notdef}rp]
LJJAOL+Calibri-Bold nf
LJJAOL+Calibri-Bold*1 [26.04 0 0 -26.04 0 0 ]msf
171.936 240.207 mo
(e)sh
185.008 240.207 mo
(-)sh
380.698 237.889 mo
(e)sh
393.77 237.889 mo
(-)sh
289.662 333.951 mo
(e)sh
302.735 333.951 mo
(-)sh
162.561 180.94 mo
(|j)
[12.3692 0 ]xsh
LJJAOL+Calibri-Bold*1 [17.28 0 0 -17.28 0 0 ]msf
181.54 187.319 mo
(1)sh
LJJAOL+Calibri-Bold*1 [26.04 0 0 -26.04 0 0 ]msf
190.3 180.959 mo
(|)sh
367.19 180.959 mo
(|j)
[12.3692 0 ]xsh
LJJAOL+Calibri-Bold*1 [17.28 0 0 -17.28 0 0 ]msf
386.161 187.319 mo
(2)sh
LJJAOL+Calibri-Bold*1 [26.04 0 0 -26.04 0 0 ]msf
394.921 180.959 mo
(|)sh
216.573 335.324 mo
(|j)
[12.3692 0 ]xsh
LJJAOL+Calibri-Bold*1 [17.28 0 0 -17.28 0 0 ]msf
235.541 341.672 mo
(3)sh
LJJAOL+Calibri-Bold*1 [26.04 0 0 -26.04 0 0 ]msf
244.301 335.312 mo
(|)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/LJJAOL+Calibri-Bold*1 uf
/LJJAOL+Calibri-Bold uf
/PBAAAA+Calibri-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
